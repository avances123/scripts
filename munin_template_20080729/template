#!/usr/bin/perl

# see perldoc at the end of this file for help/usage.
# 29th July 2008

use strict;
use warnings;
use Sys::Hostname qw<hostname>;
use File::Basename qw<basename>;

my %CONFIG = (
    title     => join(' ', 'Load Averages on', hostname),
    vlabel    => 'load',
    # Graphs are grouped by category.
    category  => 'system',
    # name must be alpha-numeric (no spaces or punctuation) and be unique
    # across all fields in this plugin
    #
    # label is the descriptive label that appears on the graph
    #
    # draw is one of: LINE1, LINE2, LINE3  1, 2, 3 pixel width lines
    #                 AREA                 Fill the area under the line
    #                 STACK                Stack on top of previous LINE/AREA
    #                                      1st field cannot be STACK
    # http://munin.projects.linpro.no/wiki/fieldname.draw
    #
    # type is one of: GAUGE                eg, temperature
    #                 COUNTER              eg, total bytes sent
    #                 DERIVE               COUNTER without overflow checks
    #                 ABSOLUTE             eg, bytes sent since we last asked
    # http://munin.projects.linpro.no/wiki/fieldname.type
    fields    => [
        {
            name  => 'one',
            label => '1min load average',
            draw  => 'LINE2',
            type  => 'GAUGE',
        },
        {
            name  => 'five',
            label => '5min load average',
            draw  => 'LINE2',
            type  => 'GAUGE',
        },
        {
            name  => 'fifteen',
            label => '15min load average',
            draw  => 'LINE2',
            type  => 'GAUGE',
        },
    ],
    # http://munin.projects.linpro.no/wiki/graph_args
    args      => '--base 1000 --lower-limit 0',
    # uncomment to use a variable from /etc/munin/plugin-conf.d/munin-node
    # url     => get_config('url'),
);

# When called, should print "$fieldname.value $value\n" for each field you
# monitor.  Aka, each item in the array returned by get_fieldnames(%config);
sub show_values {
    my (%config) = @_;

    # The rest of this sub will want replacing with your code.
    local $ENV{PATH} = '/bin:/usr/bin';
    if (`uptime` =~ /load averages?:\s*([,.\s\d]+)/) {
        my @loads = split(/,?\s+/, $1);
        for my $fieldname (get_fieldnames(%config)) {
            my $value = shift @loads;
            print "$fieldname.value $value\n"
        }
    }
}

################################################################################
# You should not need to change anything below here
################################################################################
#%# capabilities=autoconf

my $command = $ARGV[0] || '';
if    ($command eq 'config')   { show_config(%CONFIG)  }
elsif ($command eq 'autoconf') { try_autoconf(%CONFIG) }
else                           { show_values(%CONFIG)  }

sub try_autoconf {
    my (%config) = @_;

    my $will_run = defined &autoconf ? autoconf(%config) : 'yes';
    print "$will_run\n";
    exit( lc($will_run) eq 'yes' ? 0 : 1 );
}

sub get_fieldnames {
    my (%config) = @_;
    return map { $_->{name} } @{ $config{fields} };
}

sub show_config {
    my (%config) = @_;

    print "graph_$_ $config{$_}\n"
        for qw<title args category vlabel>;
    my $order = $config{order} ? $config{order}
              :                  join ' ', get_fieldnames(%config);
    print "graph_order $order\n";
    field_config($_) for @{ $config{fields} };
}

sub field_config {
    my ($field) = @_;

    for (qw<label draw type graph negative min max info>) {
        print "$field->{name}.$_ $field->{$_}\n"
            if defined $field->{$_};
    }
}

sub get_config {
    my ($name) = @_;

    return $ENV{$name} if $ENV{$name};
    my $plugin_name = basename($0);
    die qq[Missing config '$name'

Edit /etc/munin/plugin-conf.d/munin-node adding:

  [$plugin_name]
  env.$name the_value_here

replacing "the_value_here" as appropriate.
];
}

__END__

=head1 SYNOPSIS

A simple template for a munin plugin.

=head1 USAGE

You want to adjust %CONFIG and the show_values() sub.

To run/test from the command line:

    munin-run plugin_name [config]

If munin-run isn't installed you can use:

    ./plugin_name [config]

Unless you are using config variables, in which case:

    env var_name=some_value ./plugin_name [config]

see http://sysmonblog.co.uk/?p=17 for more help.

=head1 INSTALLTION

This is for Debian / Ubuntu machines but other *nixs should be similar.

=over 4

=item *

copy or symlink plugin in /etc/munin/plugins/

=item *

adjust /etc/munin/plugin-conf.d/munin-node if required

If you wanted to pass a variable called 'foo' with a value 'bar' to a plugin called 'baz':

    [baz]
    env.foo bar

then in the plugin where you define %CONFIG you would have:

    foo => get_config('foo')

and within your show_values() sub you could use this value:

    if ($config{foo} eq 'bar') { ... }

=item *

sudo /etc/init.d/munin-node restart

=item *

Have a cup of tea and visit our blog while munin updates.

=back

Send us variations for other systems and we will include them.

=head1 SEE ALSO

=over 4

=item *

http://sysmonblog.co.uk/?p=17

=item *

http://munin.projects.linpro.no/wiki/Documentation

=item *

http://muninexchange.projects.linpro.no/

=item *

http://munin.projects.linpro.no/wiki/Debugging_Munin_plugins

=back

Patches welcomed.

=head1 ADVANCED USAGE

You can safely ignore this entire section unless you are curious or looking for extended/advanced features.

=head2 autoconf

autoconf let's your plugin tell the munin installer whether this plugin can run on a given machine.

Say your plugin relies on a Linux only feature but you are also a sysadmin for some BSD machines.  By supporting autoconf your plugin will get installed on the (Linux) machines that can run it and ignored on BSD machines that can't.

To add autoconf support create a sub called autoconf() and have it return 'yes' if the plugin can run where it's currently installed, else 'no'.

For example this returns yes only if the uptime command can be found.  If uptime isn't available, the plugin cannot work and won't get installed.

    sub autoconf {
        my (%config) = @_;
        return 'yes'
            if -e '/bin/uptime';
            or -e '/usr/bin/uptime';
        return 'no';
    }

=head1 LICENSE

Copyright 2008 blog@sysmonblog.co.uk

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut
